version: '3'

x-spark-common: &spark-common
  build:
    context: .
    dockerfile: ./spark/Dockerfile
  volumes:
    - ./spark/jobs:/opt/bitnami/spark/jobs
    - ./spark/config:/opt/bitnami/spark/conf
    - ./datasets:/opt/bitnami/spark/datasets
    - /var/run/docker.sock:/var/run/docker.sock
    - ./requirements.txt:/requirements.txt
  networks:
    - spark-airflow

x-spark-worker: &worker
  <<: *spark-common
  command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  depends_on:
    - spark-master
  environment:
    SPARK_MODE: worker
    SPARK_WORKER_CORES: ${SPARK_WORKER_CORES:-4}
    SPARK_WORKER_MEMORY: ${SPARK_WORKER_MEMORY:-4g}
    SPARK_MASTER_URL: spark://spark-master:7077
    SPARK_RPC_AUTHENTICATION_ENABLED: no
    SPARK_RPC_ENCRYPTION_ENABLED: no
    SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
    SPARK_SSL_ENABLED: no
    SPARK_METRICS_ENABLED: true
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
    interval: 10s
    timeout: 5s
    retries: 5

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: ./airflow/Dockerfile
  env_file:
    - ./airflow/config/airflow.env
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./requirements.txt:/requirements.txt
    - ./spark/jobs:/opt/airflow/jobs
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - spark-airflow

services:
  spark-master:
    <<: *spark-common
    container_name: sparkflow-spark-master
    hostname: sparkflow-spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_METRICS_ENABLED=true

  spark-worker-1:
    <<: *worker
    container_name: sparkflow-spark-worker-1
    ports:
      - "8081:8081"
  
  spark-worker-2:
    <<: *worker
    container_name: sparkflow-spark-worker-2
    ports:
      - "8082:8081"

  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - spark-airflow

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - spark-airflow

  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      scheduler:
        condition: service_healthy

  scheduler:
    <<: *airflow-common
    command: >
      bash -c "airflow db migrate && airflow users create --username airflow --firstname Nhat --lastname Dang --role Admin --email dangnhatsimon@gmail.com --password airflow && airflow scheduler"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

networks:
  spark-airflow:
    driver: bridge

volumes:
  spark-events:
    external: true